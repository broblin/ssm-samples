buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/libs-release'}
        maven { url 'http://repo.springsource.org/plugins-release' }
        maven { url 'http://repo.springsource.org/plugins-snapshot' }
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
        classpath('org.asciidoctor:asciidoctor-gradle-plugin:1.5.2')
        classpath("io.spring.gradle:docbook-reference-plugin:0.3.1")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}



def sampleProjects() {
    subprojects.findAll { project ->
        project.name.contains('ssm-samples') && project.name != 'spring-statemachine-samples-common'
    }
}

configure(allprojects) {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'propdeps'

    if (System.env.TRAVIS == 'true') {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            maxParallelForks = 1
            minHeapSize = '256m'
            maxHeapSize = '384m'
        }
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    group = 'com.wonderbox.ssm-poc'

    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none']

    repositories {
        mavenCentral()
        maven { url "http://repo.springsource.org/libs-snapshot" }
        maven { url "http://repo.springsource.org/libs-release" }
        maven { url "http://repo.springsource.org/libs-milestone" }
    }

    task integrationTest(type: Test) {
        include '**/*IntegrationTests.*'
    }

    test {
        exclude '**/*IntegrationTests.*'
    }
}

configure(subprojects) { subproject ->
    //apply from: "${rootProject.projectDir}/publish-maven.gradle"

    jar {
        manifest.attributes['Implementation-Title'] = subproject.name
        manifest.attributes['Implementation-Version'] = subproject.version

        from("${rootProject.projectDir}/src/dist") {
            include "license.txt"
            include "notice.txt"
            into "META-INF"
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }
    }

    javadoc {
        // /config/configuration/StateMachineConfiguration.html...
        // java.lang.ClassCastException: com.sun.tools.javadoc.MethodDocImpl cannot be cast
        // to com.sun.tools.javadoc.AnnotationTypeElementDocImpl
        // @Bean(name = StateMachineSystemConstants.DEFAULT_ID_STATEMACHINEFACTORY)
        // vs.
        // @Bean

        enabled = false
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
        verbose = true
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}




configure(sampleProjects()) {
    apply plugin: 'org.springframework.boot'
    configurations.archives.artifacts.removeAll { it.archiveTask.is jar }
    tasks.findByPath("artifactoryPublish")?.enabled = false
    // as samples are not published, we can use jdk8
    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    dependencies {
        compile "org.springframework.statemachine:spring-statemachine-core:$springStateMachineVersion"
        compile "org.springframework:spring-context-support:$springVersion"
        testCompile("org.mockito:mockito-core:$mockitoVersion") { dep ->
            exclude group: "org.hamcrest"
        }
        testCompile "org.springframework.statemachine:spring-statemachine-test:$springStateMachineVersion"
        testCompile "org.springframework.boot:spring-boot-test:$springBootVersion"
        testCompile "org.springframework:spring-test:$springVersion"
        testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
        testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
        testCompile "junit:junit:$junitVersion"
    }
}



configure(rootProject) {
    description = 'Spring State Machine'

   // apply plugin: 'org.asciidoctor.gradle.asciidoctor'
   // apply plugin: "docbook-reference"

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()

    /*reference {
        sourceDir = new File(asciidoctor.outputDir , 'docbook5')
        pdfFilename = "spring-statemachine-reference.pdf"
        epubFilename = "spring-statemachine-reference.epub"
        expandPlaceholders = ""
    }
*/
    afterEvaluate {
        tasks.findAll { it.name.startsWith("reference") }.each{ it.dependsOn.add("asciidoctor") }
    }
/*
    asciidoctorj {
        version = '1.5.2'
    }

    asciidoctor {
        sourceDir = file("docs/src/reference/asciidoc")
        backends = ['docbook5']
        options eruby: 'erubis'
        attributes docinfo: '',
                copycss : '',
                icons : 'font',
                'source-highlighter': 'prettify',
                sectanchors : '',
                toc2: '',
                idprefix: '',
                idseparator: '-',
                doctype: 'book',
                numbered: '',
                'spring-statemachine-version' : project.version,
                'spring-version' : springVersion,
                revnumber : project.version
    }
*/
    dependencies { // for integration tests
    }



   // asciidoctor.dependsOn copyDocsSamples

  /*  task api(type: Javadoc) {
        group = 'Documentation'
        description = 'Generates aggregated Javadoc API documentation.'
        title = "${rootProject.description} ${version} API"
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.links(
                'http://docs.jboss.org/jbossas/javadoc/4.0.5/connector'
        )

        // disable javadocs for samples
        source subprojects
                .findAll { project ->
            !project.name.contains('samples')
        }
        .collect { project ->
            project.sourceSets.main.allJava
        }

        destinationDir = new File(buildDir, "api")
        classpath = files(subprojects.collect { project ->
            project.sourceSets.main.compileClasspath
        })
        maxMemory = '1024m'
    }

    task docsZip(type: Zip) {
        group = 'Distribution'
        classifier = 'docs'
        description = "Builds -${classifier} archive containing api and reference for deployment."
        from('src/dist') {
            include 'changelog.txt'
        }
        from (api) {
            into 'api'
        }
        from (reference) {
            into 'reference'
        }
    }

    task distZip(type: Zip, dependsOn: [docsZip]) {
        group = 'Distribution'
        classifier = 'dist'
        description = "Builds -${classifier} archive, containing all jars and docs, " +
                "suitable for community download page."

        ext.baseDir = "${project.name}-${project.version}";

        from('src/dist') {
            include 'readme.txt'
            include 'license.txt'
            include 'notice.txt'
            into "${baseDir}"
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }

        from(zipTree(docsZip.archivePath)) {
            into "${baseDir}/docs"
        }

        subprojects.each { subproject ->
            into ("${baseDir}/libs") {
                from subproject.jar
                if (subproject.tasks.findByPath('sourcesJar')) {
                    from subproject.sourcesJar
                }
                if (subproject.tasks.findByPath('javadocJar')) {
                    from subproject.javadocJar
                }
            }
        }
    }

    artifacts {
        archives docsZip
        archives distZip
    }

*/
    task wrapper(type: Wrapper) {
        description = 'Generates gradlew[.bat] scripts'
        gradleVersion = '2.6'
    }





    project('ssm-samples-eventservice') {
        description = 'Spring State Machine Event Service Sample'
        dependencies {
            compile "org.springframework.statemachine:spring-statemachine-redis:$springStateMachineVersion"
            compile("org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion")
            compile("org.apache.commons:commons-pool2:$commonsPool2Version")
        }
    }
    project('ssm-samples-eventserviceJpa') {
        description = 'Spring State Machine Event Service Sample'
        dependencies {
            compile("org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion")
            compile("org.apache.commons:commons-pool2:$commonsPool2Version")
            compile("org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion")
            compile("org.springframework.statemachine:spring-statemachine-kryo:$springStateMachineVersion")
            compile("org.postgresql:postgresql:9.4-1201-jdbc41")
        }
    }

}

